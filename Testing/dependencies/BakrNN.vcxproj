<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="16.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <PreferredToolArchitecture>x64</PreferredToolArchitecture>
  </PropertyGroup>
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="MinSizeRel|x64">
      <Configuration>MinSizeRel</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="RelWithDebInfo|x64">
      <Configuration>RelWithDebInfo</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGuid>{B3A7193D-74E3-399B-A13C-17D3711B3334}</ProjectGuid>
    <Keyword>Win32Proj</Keyword>
    <WindowsTargetPlatformVersion>10.0.18362.0</WindowsTargetPlatformVersion>
    <Platform>x64</Platform>
    <ProjectName>BakrNN</ProjectName>
    <VCProjectUpgraderObjectName>NoUpgrade</VCProjectUpgraderObjectName>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v142</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v142</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v142</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v142</PlatformToolset>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup>
    <_ProjectFileVersion>10.0.20506.1</_ProjectFileVersion>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">A:\NNImplementation\Testing\dependencies\Debug\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">BakrNN.dir\Debug\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">BakrNN</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">.dll</TargetExt>
    <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">true</LinkIncremental>
    <GenerateManifest Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">true</GenerateManifest>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='Release|x64'">A:\NNImplementation\Testing\dependencies\Release\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='Release|x64'">BakrNN.dir\Release\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">BakrNN</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='Release|x64'">.dll</TargetExt>
    <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkIncremental>
    <GenerateManifest Condition="'$(Configuration)|$(Platform)'=='Release|x64'">true</GenerateManifest>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">A:\NNImplementation\Testing\dependencies\MinSizeRel\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">BakrNN.dir\MinSizeRel\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">BakrNN</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">.dll</TargetExt>
    <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkIncremental>
    <GenerateManifest Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">true</GenerateManifest>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">A:\NNImplementation\Testing\dependencies\RelWithDebInfo\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">BakrNN.dir\RelWithDebInfo\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">BakrNN</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">.dll</TargetExt>
    <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">true</LinkIncremental>
    <GenerateManifest Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">true</GenerateManifest>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>A:\NNImplementation\NN\include;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
      <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <ExceptionHandling>Sync</ExceptionHandling>
      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
      <Optimization>Disabled</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level3</WarningLevel>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;BNN_EXPORT;CMAKE_INTDIR="Debug";BakrNN_EXPORTS</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_DEBUG;_WINDOWS;BNN_EXPORT;CMAKE_INTDIR=\"Debug\";BakrNN_EXPORTS</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>A:\NNImplementation\NN\include;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>A:\NNImplementation\NN\include;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Link>
      <AdditionalDependencies>A:\NNImplementation\NN\vendor\OpenCL-SDK\install\lib\OpenCL.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comdlg32.lib;advapi32.lib</AdditionalDependencies>
      <AdditionalLibraryDirectories>%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64</AdditionalOptions>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
      <ImportLibrary>A:/NNImplementation/Testing/dependencies/Debug/BakrNN.lib</ImportLibrary>
      <ProgramDataBaseFile>A:/NNImplementation/Testing/dependencies/Debug/BakrNN.pdb</ProgramDataBaseFile>
      <SubSystem>Console</SubSystem>
    </Link>
    <ProjectReference>
      <LinkLibraryDependencies>false</LinkLibraryDependencies>
    </ProjectReference>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>A:\NNImplementation\NN\include;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
      <ExceptionHandling>Sync</ExceptionHandling>
      <InlineFunctionExpansion>AnySuitable</InlineFunctionExpansion>
      <Optimization>MaxSpeed</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level3</WarningLevel>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;NDEBUG;BNN_EXPORT;CMAKE_INTDIR="Release";BakrNN_EXPORTS</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
      <DebugInformationFormat>
      </DebugInformationFormat>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;NDEBUG;BNN_EXPORT;CMAKE_INTDIR=\"Release\";BakrNN_EXPORTS</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>A:\NNImplementation\NN\include;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>A:\NNImplementation\NN\include;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Link>
      <AdditionalDependencies>A:\NNImplementation\NN\vendor\OpenCL-SDK\install\lib\OpenCL.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comdlg32.lib;advapi32.lib</AdditionalDependencies>
      <AdditionalLibraryDirectories>%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64</AdditionalOptions>
      <GenerateDebugInformation>false</GenerateDebugInformation>
      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
      <ImportLibrary>A:/NNImplementation/Testing/dependencies/Release/BakrNN.lib</ImportLibrary>
      <ProgramDataBaseFile>A:/NNImplementation/Testing/dependencies/Release/BakrNN.pdb</ProgramDataBaseFile>
      <SubSystem>Console</SubSystem>
    </Link>
    <ProjectReference>
      <LinkLibraryDependencies>false</LinkLibraryDependencies>
    </ProjectReference>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>A:\NNImplementation\NN\include;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
      <ExceptionHandling>Sync</ExceptionHandling>
      <InlineFunctionExpansion>OnlyExplicitInline</InlineFunctionExpansion>
      <Optimization>MinSpace</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level3</WarningLevel>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;NDEBUG;BNN_EXPORT;CMAKE_INTDIR="MinSizeRel";BakrNN_EXPORTS</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
      <DebugInformationFormat>
      </DebugInformationFormat>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;NDEBUG;BNN_EXPORT;CMAKE_INTDIR=\"MinSizeRel\";BakrNN_EXPORTS</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>A:\NNImplementation\NN\include;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>A:\NNImplementation\NN\include;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Link>
      <AdditionalDependencies>A:\NNImplementation\NN\vendor\OpenCL-SDK\install\lib\OpenCL.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comdlg32.lib;advapi32.lib</AdditionalDependencies>
      <AdditionalLibraryDirectories>%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64</AdditionalOptions>
      <GenerateDebugInformation>false</GenerateDebugInformation>
      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
      <ImportLibrary>A:/NNImplementation/Testing/dependencies/MinSizeRel/BakrNN.lib</ImportLibrary>
      <ProgramDataBaseFile>A:/NNImplementation/Testing/dependencies/MinSizeRel/BakrNN.pdb</ProgramDataBaseFile>
      <SubSystem>Console</SubSystem>
    </Link>
    <ProjectReference>
      <LinkLibraryDependencies>false</LinkLibraryDependencies>
    </ProjectReference>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>A:\NNImplementation\NN\include;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <ExceptionHandling>Sync</ExceptionHandling>
      <InlineFunctionExpansion>OnlyExplicitInline</InlineFunctionExpansion>
      <Optimization>MaxSpeed</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level3</WarningLevel>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;NDEBUG;BNN_EXPORT;CMAKE_INTDIR="RelWithDebInfo";BakrNN_EXPORTS</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;NDEBUG;BNN_EXPORT;CMAKE_INTDIR=\"RelWithDebInfo\";BakrNN_EXPORTS</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>A:\NNImplementation\NN\include;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>A:\NNImplementation\NN\include;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Link>
      <AdditionalDependencies>A:\NNImplementation\NN\vendor\OpenCL-SDK\install\lib\OpenCL.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comdlg32.lib;advapi32.lib</AdditionalDependencies>
      <AdditionalLibraryDirectories>%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64</AdditionalOptions>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
      <ImportLibrary>A:/NNImplementation/Testing/dependencies/RelWithDebInfo/BakrNN.lib</ImportLibrary>
      <ProgramDataBaseFile>A:/NNImplementation/Testing/dependencies/RelWithDebInfo/BakrNN.pdb</ProgramDataBaseFile>
      <SubSystem>Console</SubSystem>
    </Link>
    <ProjectReference>
      <LinkLibraryDependencies>false</LinkLibraryDependencies>
    </ProjectReference>
  </ItemDefinitionGroup>
  <ItemGroup>
    <CustomBuild Include="A:\NNImplementation\NN\CMakeLists.txt">
      <StdOutEncoding>UTF-8</StdOutEncoding>
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Building Custom Rule A:/NNImplementation/NN/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" -SA:/NNImplementation/Testing -BA:/NNImplementation/Testing/build --check-stamp-file A:/NNImplementation/Testing/dependencies/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">A:\NNImplementation\NN\src\kernels\cachedconvkernel.cl;A:\NNImplementation\NN\src\kernels\convkernel.cl;A:\NNImplementation\NN\src\kernels\fckernel.cl;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCL\OpenCLConfig.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCL\OpenCLConfigVersion.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLHeaders\OpenCLHeadersConfig.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLHeaders\OpenCLHeadersTargets.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLHeadersCpp\OpenCLHeadersCppConfig.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLHeadersCpp\OpenCLHeadersCppTargets.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLICDLoader\OpenCLICDLoaderConfig.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLICDLoader\OpenCLICDLoaderTargets-debug.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLICDLoader\OpenCLICDLoaderTargets.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLUtils\OpenCLUtilsConfig.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLUtils\OpenCLUtilsTargets-debug.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLUtils\OpenCLUtilsTargets.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLUtilsCpp\OpenCLUtilsCppConfig.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLUtilsCpp\OpenCLUtilsCppTargets-debug.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLUtilsCpp\OpenCLUtilsCppTargets.cmake;A:\NNImplementation\Testing\build\CMakeFiles\cmake.verify_globs;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">A:\NNImplementation\Testing\dependencies\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Building Custom Rule A:/NNImplementation/NN/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" -SA:/NNImplementation/Testing -BA:/NNImplementation/Testing/build --check-stamp-file A:/NNImplementation/Testing/dependencies/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">A:\NNImplementation\NN\src\kernels\cachedconvkernel.cl;A:\NNImplementation\NN\src\kernels\convkernel.cl;A:\NNImplementation\NN\src\kernels\fckernel.cl;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCL\OpenCLConfig.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCL\OpenCLConfigVersion.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLHeaders\OpenCLHeadersConfig.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLHeaders\OpenCLHeadersTargets.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLHeadersCpp\OpenCLHeadersCppConfig.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLHeadersCpp\OpenCLHeadersCppTargets.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLICDLoader\OpenCLICDLoaderConfig.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLICDLoader\OpenCLICDLoaderTargets-debug.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLICDLoader\OpenCLICDLoaderTargets.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLUtils\OpenCLUtilsConfig.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLUtils\OpenCLUtilsTargets-debug.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLUtils\OpenCLUtilsTargets.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLUtilsCpp\OpenCLUtilsCppConfig.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLUtilsCpp\OpenCLUtilsCppTargets-debug.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLUtilsCpp\OpenCLUtilsCppTargets.cmake;A:\NNImplementation\Testing\build\CMakeFiles\cmake.verify_globs;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">A:\NNImplementation\Testing\dependencies\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Building Custom Rule A:/NNImplementation/NN/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" -SA:/NNImplementation/Testing -BA:/NNImplementation/Testing/build --check-stamp-file A:/NNImplementation/Testing/dependencies/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">A:\NNImplementation\NN\src\kernels\cachedconvkernel.cl;A:\NNImplementation\NN\src\kernels\convkernel.cl;A:\NNImplementation\NN\src\kernels\fckernel.cl;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCL\OpenCLConfig.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCL\OpenCLConfigVersion.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLHeaders\OpenCLHeadersConfig.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLHeaders\OpenCLHeadersTargets.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLHeadersCpp\OpenCLHeadersCppConfig.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLHeadersCpp\OpenCLHeadersCppTargets.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLICDLoader\OpenCLICDLoaderConfig.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLICDLoader\OpenCLICDLoaderTargets-debug.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLICDLoader\OpenCLICDLoaderTargets.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLUtils\OpenCLUtilsConfig.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLUtils\OpenCLUtilsTargets-debug.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLUtils\OpenCLUtilsTargets.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLUtilsCpp\OpenCLUtilsCppConfig.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLUtilsCpp\OpenCLUtilsCppTargets-debug.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLUtilsCpp\OpenCLUtilsCppTargets.cmake;A:\NNImplementation\Testing\build\CMakeFiles\cmake.verify_globs;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">A:\NNImplementation\Testing\dependencies\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Building Custom Rule A:/NNImplementation/NN/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" -SA:/NNImplementation/Testing -BA:/NNImplementation/Testing/build --check-stamp-file A:/NNImplementation/Testing/dependencies/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">A:\NNImplementation\NN\src\kernels\cachedconvkernel.cl;A:\NNImplementation\NN\src\kernels\convkernel.cl;A:\NNImplementation\NN\src\kernels\fckernel.cl;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCL\OpenCLConfig.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCL\OpenCLConfigVersion.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLHeaders\OpenCLHeadersConfig.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLHeaders\OpenCLHeadersTargets.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLHeadersCpp\OpenCLHeadersCppConfig.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLHeadersCpp\OpenCLHeadersCppTargets.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLICDLoader\OpenCLICDLoaderConfig.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLICDLoader\OpenCLICDLoaderTargets-debug.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLICDLoader\OpenCLICDLoaderTargets.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLUtils\OpenCLUtilsConfig.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLUtils\OpenCLUtilsTargets-debug.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLUtils\OpenCLUtilsTargets.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLUtilsCpp\OpenCLUtilsCppConfig.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLUtilsCpp\OpenCLUtilsCppTargets-debug.cmake;A:\NNImplementation\NN\vendor\OpenCL-SDK\install\share\cmake\OpenCLUtilsCpp\OpenCLUtilsCppTargets.cmake;A:\NNImplementation\Testing\build\CMakeFiles\cmake.verify_globs;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">A:\NNImplementation\Testing\dependencies\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="A:\NNImplementation\NN\src\Batch.cpp" />
    <ClCompile Include="A:\NNImplementation\NN\src\Layer.cpp" />
    <ClCompile Include="A:\NNImplementation\NN\src\NeuralNetwork.cpp" />
    <ClCompile Include="A:\NNImplementation\NN\src\OpenCLWrapper.cpp" />
    <ClInclude Include="A:\NNImplementation\NN\src\include\AllLayers.h" />
    <ClInclude Include="A:\NNImplementation\NN\src\include\Batch.h" />
    <ClInclude Include="A:\NNImplementation\NN\src\include\ConvLayer.h" />
    <ClInclude Include="A:\NNImplementation\NN\src\include\Core.h" />
    <ClInclude Include="A:\NNImplementation\NN\src\include\Layer.h" />
    <ClInclude Include="A:\NNImplementation\NN\src\include\MaxPoolLayer.h" />
    <ClInclude Include="A:\NNImplementation\NN\src\include\NeuralNetwork.h" />
    <ClInclude Include="A:\NNImplementation\NN\src\include\OpenCLWrapper.h" />
    <ClInclude Include="A:\NNImplementation\NN\src\include\RouteLayer.h" />
    <ClInclude Include="A:\NNImplementation\NN\src\include\ShortcutLayer.h" />
    <ClInclude Include="A:\NNImplementation\NN\src\include\Upsamplelayer.h" />
    <ClInclude Include="A:\NNImplementation\NN\src\include\YOLOLayer.h" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="A:\NNImplementation\Testing\build\ZERO_CHECK.vcxproj">
      <Project>{7775BE34-3A6D-391A-8C8B-2286163EC555}</Project>
      <Name>ZERO_CHECK</Name>
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      <CopyToOutputDirectory>Never</CopyToOutputDirectory>
    </ProjectReference>
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>